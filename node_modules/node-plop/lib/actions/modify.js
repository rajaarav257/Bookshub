"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var fspp = _interopRequireWildcard(require("../fs-promise-proxy"));

var _commonActionUtils = require("./_common-action-utils");

var _commonActionInterfaceCheck = _interopRequireDefault(require("./_common-action-interface-check"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function _default(data, cfg, plop) {
  const interfaceTestResult = (0, _commonActionInterfaceCheck.default)(cfg);

  if (interfaceTestResult !== true) {
    throw interfaceTestResult;
  }

  const fileDestPath = (0, _commonActionUtils.makeDestPath)(data, cfg, plop);

  try {
    // check path
    const pathExists = await fspp.fileExists(fileDestPath);

    if (!pathExists) {
      throw 'File does not exist';
    } else {
      let fileData = await fspp.readFile(fileDestPath);
      cfg.templateFile = (0, _commonActionUtils.getRenderedTemplatePath)(data, cfg, plop);
      const replacement = await (0, _commonActionUtils.getRenderedTemplate)(data, cfg, plop);
      fileData = fileData.replace(cfg.pattern, replacement);
      const transformed = await (0, _commonActionUtils.getTransformedTemplate)(fileData, data, cfg);
      await fspp.writeFile(fileDestPath, transformed);
    }

    return (0, _commonActionUtils.getRelativeToBasePath)(fileDestPath, plop);
  } catch (err) {
    (0, _commonActionUtils.throwStringifiedError)(err);
  }
}